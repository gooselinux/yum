commit 204f47d96e8c585b96da60adf4ef94d8211be168
Author: James Antill <james@and.org>
Date:   Tue Mar 30 15:48:29 2010 -0400

     Speedup repeated calls to .install() with a pattern, via. returnPackages().
         Add negative caching to both sqlite and rpmdb.
         Add pkg names with a '-' in them to pkgnames_loaded in sqlite.

diff --git a/yum/rpmsack.py b/yum/rpmsack.py
index 8289cd2..4580150 100644
--- a/yum/rpmsack.py
+++ b/yum/rpmsack.py
@@ -144,6 +144,7 @@ class RPMDBPackageSack(PackageSackBase):
         self._name2pkg = {}
         self._tup2pkg = {}
         self._completely_loaded = False
+        self._pkgmatch_fails = set()
         self._simple_pkgtup_list = []
         self._get_pro_cache = {}
         self._get_req_cache  = {}
@@ -189,6 +190,7 @@ class RPMDBPackageSack(PackageSackBase):
         self._name2pkg = {}
         self._tup2pkg = {}
         self._completely_loaded = False
+        self._pkgmatch_fails = set()
         self._simple_pkgtup_list = []
         self._get_pro_cache = {}
         self._get_req_cache = {}
@@ -362,13 +364,14 @@ class RPMDBPackageSack(PackageSackBase):
         return misc.newestInList(allpkgs)
 
     @staticmethod
-    def _compile_patterns(patterns, ignore_case=False):
+    def _compile_patterns(self, patterns, ignore_case=False):
         if not patterns or len(patterns) > constants.PATTERNS_MAX:
             return None
         ret = []
         for pat in patterns:
             if not pat:
                 continue
+
             qpat = pat[0]
             if qpat in ('?', '*'):
                 qpat = None
@@ -381,6 +384,7 @@ class RPMDBPackageSack(PackageSackBase):
         return ret
     @staticmethod
     def _match_repattern(repatterns, hdr, ignore_case):
+        """ This is basically parsePackages() but for rpm hdr objects. """
         if repatterns is None:
             return True
 
@@ -417,6 +421,16 @@ class RPMDBPackageSack(PackageSackBase):
         """Returns a list of packages. Note that the packages are
            always filtered to those matching the patterns/case. repoid is
            ignored, and is just here for compatibility with non-rpmdb sacks. """
+        if patterns and not ignore_case:
+            tpats = []
+            for pat in patterns:
+                if pat in self._pkgmatch_fails:
+                    continue
+                tpats.append(pat)
+            patterns = tpats
+            if not patterns:
+                return []
+
         if not self._completely_loaded:
             rpats = self._compile_patterns(patterns, ignore_case)
             for hdr, idx in self._all_packages():
@@ -430,6 +444,7 @@ class RPMDBPackageSack(PackageSackBase):
             pkgobjlist = [pkg for pkg in pkgobjlist if pkg.name != 'gpg-pubkey']
         if patterns:
             pkgobjlist = parsePackages(pkgobjlist, patterns, not ignore_case)
+            self._pkgmatch_fails.update(pkgobjlist[2])
             pkgobjlist = pkgobjlist[0] + pkgobjlist[1]
         return pkgobjlist
 
diff --git a/yum/sqlitesack.py b/yum/sqlitesack.py
index 1d6c764..9a95b7b 100644
--- a/yum/sqlitesack.py
+++ b/yum/sqlitesack.py
@@ -428,6 +428,7 @@ class YumSqlitePackageSack(yumRepo.YumPackageSack):
         self._pkgname2pkgkeys = {}
         self._pkgtup2pkgs = {}
         self._pkgnames_loaded = set()
+        self._pkgmatch_fails = set()
         self._arch_allowed = None
         self._pkgExcluder = []
         self._pkgExcludeIds = {}
@@ -491,6 +492,7 @@ class YumSqlitePackageSack(yumRepo.YumPackageSack):
         self._key2pkg = {}
         self._pkgname2pkgkeys = {}
         self._pkgnames_loaded = set()
+        self._pkgmatch_fails = set()
         self._pkgtup2pkgs = {}
         self._search_cache = {
             'provides' : { },
@@ -1228,6 +1230,9 @@ class YumSqlitePackageSack(yumRepo.YumPackageSack):
         user_names = set(names)
         names = []
         for pkgname in user_names:
+            if pkgname in self._pkgmatch_fails:
+                continue
+
             if loaded_all_names or pkgname in self._pkgnames_loaded:
                 returnList.extend(self._packagesByName(pkgname))
             else:
@@ -1502,7 +1507,8 @@ class YumSqlitePackageSack(yumRepo.YumPackageSack):
                   'sql_envra', 'sql_nevra']
         need_full = False
         for pat in patterns:
-            if misc.re_full_search_needed(pat):
+            if (misc.re_full_search_needed(pat) and
+                (ignore_case or pat not in self._pkgnames_loaded)):
                 need_full = True
                 break
 
@@ -1536,12 +1542,18 @@ class YumSqlitePackageSack(yumRepo.YumPackageSack):
         pat_sqls = []
         pat_data = []
         for (pattern, rest) in patterns:
+            if not ignore_case and pattern in self._pkgmatch_fails:
+                continue
+
             for field in fields:
                 if ignore_case:
                     pat_sqls.append("%s LIKE ?%s" % (field, rest))
                 else:
                     pat_sqls.append("%s %s ?" % (field, rest))
                 pat_data.append(pattern)
+        if patterns and not pat_sqls:
+            return
+
         if pat_sqls:
             qsql = _FULL_PARSE_QUERY_BEG + " OR ".join(pat_sqls)
         else:
@@ -1578,6 +1590,18 @@ class YumSqlitePackageSack(yumRepo.YumPackageSack):
         if not need_full and repoid is None:
             # Mark all the processed pkgnames as fully loaded
             self._pkgnames_loaded.update([po.name for po in returnList])
+        if need_full:
+            for (pat, rest) in patterns:
+                if rest == 'glob':
+                    continue
+                assert rest == '='
+                for pkg in returnList:
+                    if pkg.name == pat:
+                        self._pkgnames_loaded.add(pkg.name)
+                        break
+        if not returnList:
+            for (pat, rest) in patterns:
+                self._pkgmatch_fails.add(pat)
 
         return returnList
                 
commit ae29fa070f83cf2e11b06ea938468e51eac00eba
Author: James Antill <james@and.org>
Date:   Tue Mar 30 18:47:49 2010 -0400

    Add searchProvides() into the false positive cache

diff --git a/yum/sqlitesack.py b/yum/sqlitesack.py
index 9a95b7b..d387c76 100644
--- a/yum/sqlitesack.py
+++ b/yum/sqlitesack.py
@@ -1374,7 +1374,12 @@ class YumSqlitePackageSack(yumRepo.YumPackageSack):
 
     def searchProvides(self, name):
         """return list of packages providing name (any evr and flag)"""
-        return self.searchPrco(name, "provides")
+        if name in self._pkgmatch_fails:
+            return []
+        ret = self.searchPrco(name, "provides")
+        if not ret:
+            self._pkgmatch_fails.add(name)
+        return ret
                 
     def searchRequires(self, name):
         """return list of packages requiring name (any evr and flag)"""
commit 1f76f743d187226461a226358147c37d42a8fab1
Author: James Antill <james@and.org>
Date:   Tue Mar 30 18:52:39 2010 -0400

    Pkgname caching for rpmdb.returnPackages() so update is as fast as install

diff --git a/yum/rpmsack.py b/yum/rpmsack.py
index 4580150..4c17b67 100644
--- a/yum/rpmsack.py
+++ b/yum/rpmsack.py
@@ -142,6 +142,7 @@ class RPMDBPackageSack(PackageSackBase):
         self.root = root
         self._idx2pkg = {}
         self._name2pkg = {}
+        self._pkgnames_loaded = set()
         self._tup2pkg = {}
         self._completely_loaded = False
         self._pkgmatch_fails = set()
@@ -188,6 +189,7 @@ class RPMDBPackageSack(PackageSackBase):
     def dropCachedData(self):
         self._idx2pkg = {}
         self._name2pkg = {}
+        self._pkgnames_loaded = set()
         self._tup2pkg = {}
         self._completely_loaded = False
         self._pkgmatch_fails = set()
@@ -321,7 +323,12 @@ class RPMDBPackageSack(PackageSackBase):
         return result
 
     def searchProvides(self, name):
-        return self.searchPrco(name, 'provides')
+        if name in self._pkgmatch_fails:
+            return []
+        ret = self.searchPrco(name, 'provides')
+        if not ret:
+            self._pkgmatch_fails.add(name)
+        return ret
 
     def searchRequires(self, name):
         return self.searchPrco(name, 'requires')
@@ -364,7 +371,7 @@ class RPMDBPackageSack(PackageSackBase):
         return misc.newestInList(allpkgs)
 
     @staticmethod
-    def _compile_patterns(self, patterns, ignore_case=False):
+    def _compile_patterns(patterns, ignore_case=False):
         if not patterns or len(patterns) > constants.PATTERNS_MAX:
             return None
         ret = []
@@ -421,15 +428,19 @@ class RPMDBPackageSack(PackageSackBase):
         """Returns a list of packages. Note that the packages are
            always filtered to those matching the patterns/case. repoid is
            ignored, and is just here for compatibility with non-rpmdb sacks. """
+        ret = []
         if patterns and not ignore_case:
             tpats = []
             for pat in patterns:
                 if pat in self._pkgmatch_fails:
                     continue
+                if pat in self._pkgnames_loaded:
+                    ret.extend(self._name2pkg[pat])
+                    continue
                 tpats.append(pat)
             patterns = tpats
             if not patterns:
-                return []
+                return ret
 
         if not self._completely_loaded:
             rpats = self._compile_patterns(patterns, ignore_case)
@@ -445,7 +456,14 @@ class RPMDBPackageSack(PackageSackBase):
         if patterns:
             pkgobjlist = parsePackages(pkgobjlist, patterns, not ignore_case)
             self._pkgmatch_fails.update(pkgobjlist[2])
-            pkgobjlist = pkgobjlist[0] + pkgobjlist[1]
+            if ret:
+                pkgobjlist = pkgobjlist[0] + pkgobjlist[1] + ret
+            else:
+                pkgobjlist = pkgobjlist[0] + pkgobjlist[1]
+            for pkg in pkgobjlist:
+                for pat in patterns:
+                    if pkg.name == pat:
+                            self._pkgnames_loaded.add(pkg.name)
         return pkgobjlist
 
     def _uncached_returnConflictPackages(self):
@@ -975,7 +993,7 @@ class RPMDBPackageSack(PackageSackBase):
         loc = locals()
         ret = []
 
-        if self._completely_loaded:
+        if self._completely_loaded or name in self._pkgnames_loaded:
             if name is not None:
                 pkgs = self._name2pkg.get(name, [])
             else:
@@ -991,6 +1009,9 @@ class RPMDBPackageSack(PackageSackBase):
         ts = self.readOnlyTS()
         if name is not None:
             mi = ts.dbMatch('name', name)
+            #  We create POs out of all matching names, even if we don't return
+            # them.
+            self._pkgnames_loaded.add(name)
         elif arch is not None:
             mi = ts.dbMatch('arch', arch)
         else:
commit d2638b9d8b360713f9739a88dfa03e1e3ffab28b
Author: James Antill <james@and.org>
Date:   Fri Apr 9 16:14:27 2010 -0400

    Remove bad assert: yum list blah\*

diff --git a/yum/sqlitesack.py b/yum/sqlitesack.py
index 5887cb7..8a4ec8b 100644
--- a/yum/sqlitesack.py
+++ b/yum/sqlitesack.py
@@ -1599,7 +1599,6 @@ class YumSqlitePackageSack(yumRepo.YumPackageSack):
             for (pat, rest) in patterns:
                 if rest == 'glob':
                     continue
-                assert rest == '='
                 for pkg in returnList:
                     if pkg.name == pat:
                         self._pkgnames_loaded.add(pkg.name)
commit d3c698e03df6f664c67b61301320ebdc2dc11422
Author: James Antill <james@and.org>
Date:   Mon Apr 12 11:50:55 2010 -0400

    Do the pkgnames_loaded in the correct place, for _search

diff --git a/yum/rpmsack.py b/yum/rpmsack.py
index 4c17b67..179b008 100644
--- a/yum/rpmsack.py
+++ b/yum/rpmsack.py
@@ -1009,9 +1009,6 @@ class RPMDBPackageSack(PackageSackBase):
         ts = self.readOnlyTS()
         if name is not None:
             mi = ts.dbMatch('name', name)
-            #  We create POs out of all matching names, even if we don't return
-            # them.
-            self._pkgnames_loaded.add(name)
         elif arch is not None:
             mi = ts.dbMatch('arch', arch)
         else:
@@ -1022,6 +1019,10 @@ class RPMDBPackageSack(PackageSackBase):
             if hdr['name'] == 'gpg-pubkey':
                 continue
             po = self._makePackageObject(hdr, mi.instance())
+            #  We create POs out of all matching names, even if we don't return
+            # them.
+            self._pkgnames_loaded.add(po.name)
+
             for tag in ('arch', 'rel', 'ver', 'epoch'):
                 if loc[tag] is not None and loc[tag] != getattr(po, tag):
                     break
commit 62759284de079371407f4ba429f48a0be5a5589b
Author: James Antill <james@and.org>
Date:   Mon Apr 12 11:53:17 2010 -0400

    Do the pkgmatch_fails negative caching, in _search

diff --git a/yum/rpmsack.py b/yum/rpmsack.py
index 179b008..2b932cf 100644
--- a/yum/rpmsack.py
+++ b/yum/rpmsack.py
@@ -986,6 +986,9 @@ class RPMDBPackageSack(PackageSackBase):
 
     def _search(self, name=None, epoch=None, ver=None, rel=None, arch=None):
         '''List of matching packages, to zero or more of NEVRA.'''
+        if name is not None and name in self._pkgmatch_fails:
+            return []
+
         pkgtup = (name, arch, epoch, ver, rel)
         if pkgtup in self._tup2pkg:
             return [self._tup2pkg[pkgtup]]
@@ -996,6 +999,8 @@ class RPMDBPackageSack(PackageSackBase):
         if self._completely_loaded or name in self._pkgnames_loaded:
             if name is not None:
                 pkgs = self._name2pkg.get(name, [])
+                if not pkgs:
+                    self._pkgmatch_fails.add(name)
             else:
                 pkgs = self.returnPkgs()
             for po in pkgs:
@@ -1015,6 +1020,7 @@ class RPMDBPackageSack(PackageSackBase):
             mi = ts.dbMatch()
             self._completely_loaded = True
 
+        done = False
         for hdr in mi:
             if hdr['name'] == 'gpg-pubkey':
                 continue
@@ -1022,6 +1028,7 @@ class RPMDBPackageSack(PackageSackBase):
             #  We create POs out of all matching names, even if we don't return
             # them.
             self._pkgnames_loaded.add(po.name)
+            done = True
 
             for tag in ('arch', 'rel', 'ver', 'epoch'):
                 if loc[tag] is not None and loc[tag] != getattr(po, tag):
@@ -1032,6 +1039,9 @@ class RPMDBPackageSack(PackageSackBase):
         if self.auto_close:
             self.ts.close()
 
+        if not done and name is not None:
+            self._pkgmatch_fails.add(name)
+
         return ret
 
     def _makePackageObject(self, hdr, index):
commit e45f29737d830587373e2b494fdcee95ad708e65
Author: James Antill <james@and.org>
Date:   Mon Apr 12 11:56:00 2010 -0400

    Don't integrate negative pkgnames with provides, probably fine but...

diff --git a/yum/rpmsack.py b/yum/rpmsack.py
index 2b932cf..e113802 100644
--- a/yum/rpmsack.py
+++ b/yum/rpmsack.py
@@ -146,6 +146,7 @@ class RPMDBPackageSack(PackageSackBase):
         self._tup2pkg = {}
         self._completely_loaded = False
         self._pkgmatch_fails = set()
+        self._provmatch_fails = set()
         self._simple_pkgtup_list = []
         self._get_pro_cache = {}
         self._get_req_cache  = {}
@@ -193,6 +194,7 @@ class RPMDBPackageSack(PackageSackBase):
         self._tup2pkg = {}
         self._completely_loaded = False
         self._pkgmatch_fails = set()
+        self._provmatch_fails = set()
         self._simple_pkgtup_list = []
         self._get_pro_cache = {}
         self._get_req_cache = {}
@@ -323,11 +325,11 @@ class RPMDBPackageSack(PackageSackBase):
         return result
 
     def searchProvides(self, name):
-        if name in self._pkgmatch_fails:
+        if name in self._provmatch_fails:
             return []
         ret = self.searchPrco(name, 'provides')
         if not ret:
-            self._pkgmatch_fails.add(name)
+            self._provmatch_fails.add(name)
         return ret
 
     def searchRequires(self, name):
diff --git a/yum/sqlitesack.py b/yum/sqlitesack.py
index 8a4ec8b..344a966 100644
--- a/yum/sqlitesack.py
+++ b/yum/sqlitesack.py
@@ -429,6 +429,7 @@ class YumSqlitePackageSack(yumRepo.YumPackageSack):
         self._pkgtup2pkgs = {}
         self._pkgnames_loaded = set()
         self._pkgmatch_fails = set()
+        self._provmatch_fails = set()
         self._arch_allowed = None
         self._pkgExcluder = []
         self._pkgExcludeIds = {}
@@ -493,6 +494,7 @@ class YumSqlitePackageSack(yumRepo.YumPackageSack):
         self._pkgname2pkgkeys = {}
         self._pkgnames_loaded = set()
         self._pkgmatch_fails = set()
+        self._provmatch_fails = set()
         self._pkgtup2pkgs = {}
         self._search_cache = {
             'provides' : { },
@@ -1374,11 +1376,11 @@ class YumSqlitePackageSack(yumRepo.YumPackageSack):
 
     def searchProvides(self, name):
         """return list of packages providing name (any evr and flag)"""
-        if name in self._pkgmatch_fails:
+        if name in self._provmatch_fails:
             return []
         ret = self.searchPrco(name, "provides")
         if not ret:
-            self._pkgmatch_fails.add(name)
+            self._provmatch_fails.add(name)
         return ret
                 
     def searchRequires(self, name):
